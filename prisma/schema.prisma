generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String   @id @default(cuid())
  email         String   @unique
  name          String?
  role          UserRole @default(USER)
  passwordHash  String?
  emailVerified DateTime?
  image         String?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  prompts       Prompt[]
  subscriptions Subscription[]
  viewLogs      ViewLog[]
  accounts      Account[]
  sessions      Session[]

  @@index([email])
  @@map("users")
}

enum UserRole {
  ADMIN
  USER
}

model Prompt {
  id          String   @id @default(cuid())
  title       String
  description String?
  content     String   @db.Text
  model       String?
  temperature Float?
  published   Boolean  @default(false)
  featured    Boolean  @default(false)
  userId      String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  user   User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  images PromptImage[]
  tags   PromptTag[]
  views  ViewLog[]

  @@index([userId])
  @@index([published])
  @@index([featured])
  @@index([createdAt])
  @@map("prompts")
}

model PromptImage {
  id        String   @id @default(cuid())
  promptId  String
  url       String
  alt       String?
  order     Int      @default(0)
  createdAt DateTime @default(now())

  prompt Prompt @relation(fields: [promptId], references: [id], onDelete: Cascade)

  @@index([promptId])
  @@map("prompt_images")
}

model Tag {
  id        String   @id @default(cuid())
  name      String   @unique
  slug      String   @unique
  color     String?
  createdAt DateTime @default(now())

  prompts PromptTag[]

  @@index([slug])
  @@map("tags")
}

model PromptTag {
  promptId String
  tagId    String

  prompt Prompt @relation(fields: [promptId], references: [id], onDelete: Cascade)
  tag    Tag    @relation(fields: [tagId], references: [id], onDelete: Cascade)

  @@id([promptId, tagId])
  @@index([tagId])
  @@map("prompt_tags")
}

model Subscription {
  id                   String             @id @default(cuid())
  userId               String
  stripeCustomerId     String?            @unique
  stripeSubscriptionId String?            @unique
  status               SubscriptionStatus @default(ACTIVE)
  plan                 SubscriptionPlan   @default(FREE)
  currentPeriodStart   DateTime?
  currentPeriodEnd     DateTime?
  cancelAtPeriodEnd    Boolean            @default(false)
  createdAt            DateTime           @default(now())
  updatedAt            DateTime           @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([stripeCustomerId])
  @@index([stripeSubscriptionId])
  @@map("subscriptions")
}

enum SubscriptionStatus {
  ACTIVE
  PAST_DUE
  CANCELED
  INCOMPLETE
  INCOMPLETE_EXPIRED
  TRIALING
  UNPAID
}

enum SubscriptionPlan {
  FREE
  PRO
  ENTERPRISE
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@map("verification_tokens")
}

model ViewLog {
  id        String   @id @default(cuid())
  promptId  String
  userId    String?
  ipAddress String?
  userAgent String?
  createdAt DateTime @default(now())

  prompt Prompt @relation(fields: [promptId], references: [id], onDelete: Cascade)
  user   User?  @relation(fields: [userId], references: [id], onDelete: SetNull)

  @@index([promptId])
  @@index([userId])
  @@index([createdAt])
  @@map("view_logs")
}
